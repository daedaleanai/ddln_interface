syntax = "proto2";

package ddln;

import "ddln_common.proto";

// Imaginator interface definitions
//
// This file contains interface definitions for Daedalean's cloud image generator: Imaginator.
// Imaginator is a cloud rendering service which takes image requests and returns generated images.
// Typically an image request consists of camera intrinsics, extrinsics, environmental conditions, and so on.
// The service aims to be stateless, meaning an image request would yields a deterministic response. However, due to
// internal rendering buffers and some environment features this deterministic response is not guaranteed.
// Daedalean provides a range of scenery using different cloud endpoints.
// Contact sim@daedalean.ai for more information and usage.
//
// Note 1: Interface units typically are assumed in metric system, e.g. SI units, unless indicated otherwise.
// Note 2: World coordinates are expressed in local East North Up (ENU) coordinate frame
// Note 3: Other coordinate frames are defined in ddln_common.proto
//

message CameraIntrinsics {
    required float verticalFieldOfView_deg = 1;
}

enum ImageFormat {
    // Note: OpenCV works with BGR by default
    BGR = 0;
    RGB = 1;
    BGRA = 2;
    RGBA = 3;
    GRAY = 4;
}

message ImageRequest {
    required ImageFormat format = 1;
    required uint32 width = 2;
    required uint32 height = 3;
    optional CameraIntrinsics intrinsics = 4;

    // Camera pose C in world frame W (see ddln_common.proto)
    optional Pose extrinsics_WC = 5;
    enum Type {
        // regular image
        DEFAULT = 0;

        // Auxiliary image, e.g. segmented image
        AUXILIARY = 1;
    }
    optional Type type = 7;
}

message ImageResponse {
    // Pixel array in requested format, 8UC1 for GRAY, 8UC3 for RGB/BGR, and so on.
    required bytes image = 1;
}

message WorldInfo {
    optional string name = 1;

    // position in ENU coordinates of the home (geo referenced) point.
    optional Point3d home = 2;

    // position in ENU coordinates of the SITL start location.
    optional Point3d start = 3;
    optional LatLongAlt home_geo = 4;
}

service ImageService {
    rpc GenerateImage(ImageRequest) returns (ImageResponse);
    rpc GetWorldInfo(Empty) returns (WorldInfo);
}
