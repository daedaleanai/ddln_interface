syntax = "proto2";

package ddln;

import "ddln_common.proto";

message CameraIntrinsics {
    required float verticalFieldOfView_deg = 1;
}

message SceneObject {
    optional string type = 1;

    // pose in ENU coordinates
    optional Pose pose = 2;
}

enum ImageFormat {
    // Note: OpenCV works with BGR by default
    BGR = 0;
    RGB = 1;
    BGRA = 2;
    RGBA = 3;
    GRAY = 4;
}

message Environment {
    message Clouds {
        enum Type {
            NONE = 0;
            ALTOCUMULUS = 1;
            CLOUDS_BASE = 2;
            CUMULUS = 3;
            NIMBOSTRATUS = 4;
            STRATOCUMULUS = 5;
            STRATUS = 6;
        }
        optional Type type = 1;
        optional float altitude_m = 2;

        // density value: 0 - 1
        optional float density = 3;

        // directional x,y,z values to set the wind in the Engine.
        optional Point3d velocity = 4;
    }
    repeated Clouds clouds = 1;

    // dry particles in the air. it keeps the brightness and color of the light.
    message Haze {
        enum Type {
            // default keeps the value; visibility = 20000, density = 1
            DEFAULT = 0;

            // Custom visibility and density as specified below
            CUSTOM = 1;
        }
        optional Type type = 1;

        // visibility distance: 0 - 20000
        optional float visibility = 2;

        // density value: 0.001 - 100
        optional float density = 3;
    }
    optional Haze haze = 2;

    // water droplets in the air. white colored fog which obstructs the light source.
    message Fog {
        optional bool enabled = 1;

        // fog multiplier value: 0.01 - 0.0001
        optional float multiplier = 2 ;
    }
    optional Fog fog = 3;

    message Sun {
        enum Type {
            // default uses the sun attached with the world. parameters are not changeable.
            DEFAULT = 0;

            // customized sun with parameters below
            CUSTOM = 1;
        }
        optional Type type = 1;
        optional float azimuth_deg = 2;

        // altitude should not exceed 90 degrees.
        optional float altitude_deg = 3;

        // intensity value: 0 - 1
        optional float intensity = 4;
    }
    optional Sun sun = 4;

    message Rain {
        optional bool enabled = 1;

        // intensity value: 0 - 1
        optional float intensity = 2;
    }
    optional Rain rain = 5;

    message Snow {
        optional bool enabled = 1;

        // intensity value: 0 - 1
        optional float intensity = 2;
    }
    optional Snow snow = 6;
}

message ImageRequest {
    required ImageFormat format = 1;
    required uint32 width = 2;
    required uint32 height = 3;
    optional CameraIntrinsics intrinsics = 4;
    optional Pose extrinsics_WC = 5;
    repeated SceneObject objects = 6;
    enum Type {
        // regular image
        DEFAULT = 0;

        // e.g. segmented image
        AUXILIARY = 1;
    }
    optional Type type = 7;
    optional Environment environment = 8;
}

message ImageResponse {
    // pixel array in requested format, 8UC1 for GRAY, 8UC3 for RGB/BGR, and so on.
    required bytes image = 1;
}

message WorldInfo {
    optional string name = 1;

    // position in ENU coordinates of the home (geo referenced) point.
    optional Point3d home = 2;

    // position in ENU coordinates of the SITL start location.
    optional Point3d start = 3;
    optional LatLongAlt home_geo = 4;
}

service ImageService {
    rpc GenerateImage(ImageRequest) returns (ImageResponse);
    rpc GetWorldInfo(Empty) returns (WorldInfo);
}
