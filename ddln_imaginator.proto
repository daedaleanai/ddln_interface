syntax = "proto2";

package ddln;

import "ddln_common.proto";

message CameraIntrinsics {
    required float verticalFieldOfView_deg = 1;
}

message SceneObject {
    optional string type = 1;
    optional Pose pose = 2; // pose in ENU coordinates
}

enum ImageFormat {
    BGR = 0; // Note: OpenCV works with BGR by default
    RGB = 1;
    BGRA = 2;
    RGBA = 3;
    GRAY = 4;
}

message Environment {
    message Clouds {
        enum Type {
            NONE = 0;
            ALTOCUMULUS = 1;
            CLOUDS_BASE = 2;
            CUMULUS = 3;
            NIMBOSTRATUS = 4;
            STRATOCUMULUS = 5;
            STRATUS = 6;
        }
        optional Type type = 1;
        optional float altitude_m = 2;
        optional float density = 3; // Changes the cloudiness.
        optional Point3d velocity = 4; // Only use the directional x,y,z values to set the wind in the Engine.
    }
    repeated Clouds clouds = 1;

    message Haze { // Small dry particles in the air. Keeps the brightness and color of the light.
        enum Type {
            DEFAULT = 0; // Visibility = 20000, density = 1
            CUSTOM = 1; // Custom visibility and density as specified below
        }
        optional Type type = 1;
        optional float visibility = 2; // recommended 0 - 20000
        optional float density = 3; // recommended 0.001 - 100
    }
    optional Haze haze = 2;

    message Fog { // Water droplets in the air. White colored fog which obstructs the light source.
        optional bool enabled = 1;
        optional float multiplier = 2 ; // recommended 0.01 - 0.0001
    }
    optional Fog fog = 3;

    message Sun {
        enum Type {
            DEFAULT = 0; // Keeps the sun attached with the world. Parameters are not changeable.
            CUSTOM = 1; // Customized sun with parameters below
        }
        optional Type type = 1;
        optional float azimuth_deg = 2;
        optional float altitude_deg = 3; // should not exceed 90 degree.
        optional float intensity = 4; // scaled 0 - 1
    }
    optional Sun sun = 4;

    message Precipitation {
        enum Type {
            NONE = 0;
            RAIN = 1;
            SNOW = 2;
        }
        optional Type type = 1;
        optional float intensity = 2; // scaled 0 - 1
    }
    optional Precipitation precipitation = 5;
}

message ImageRequest {
    required ImageFormat format = 1;
    required uint32 width = 2;
    required uint32 height = 3;
    optional CameraIntrinsics intrinsics = 4;
    optional Pose extrinsics_WC = 5;
    repeated SceneObject objects = 6;
    enum Type {
        DEFAULT = 0; // regular image
        AUXILIARY = 1; // e.g. segmented image
    }
    optional Type type = 7;
    optional Environment environment = 8;
}

message ImageResponse {
    required bytes image = 1; // pixel array in requested format, 8UC1 for GRAY, 8UC3 for RGB/BGR, and so on.
}

message WorldInfo {
    optional string name = 1;
    optional Point3d home = 2; // position in ENU coordinates of the home (geo referenced) point.
    optional Point3d start = 3; // position in ENU coordinates of the SITL start location.
    optional LatLongAlt home_geo = 4;
}

service ImageService {
    rpc GenerateImage(ImageRequest) returns (ImageResponse);
    rpc GetWorldInfo(Empty) returns (WorldInfo);
}
